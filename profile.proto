syntax = "proto3";

package profile;
option go_package =".;profile_v1";

enum ContactType {
    EMAIL = 0;
    PHONE = 1;
}

enum CommunicationLevel {
    ALL = 0; // Any communication including 3rd party marketing is welcome.
    INTERNAL_MARKETING = 1; // Can receive marketing messages from our services
    IMPORTANT_ALERTS = 2; // These can be things like policy changes
    SYSTEM_ALERTS = 3; // This include user actions expecting a response.
    NO_CONTACT = 4; // This one needs prayers
}

message ContactObject {
    string ID = 1;
    ContactType type = 2;
    string detail = 3;
    bool verifed = 4;
    CommunicationLevel communication_level = 5;
}

message AddressObject {
    string ID = 1;
    string name = 2;
    string country = 3;
    string city = 4;
    string area = 5;
    string street = 6;
    string house = 7;
    string postcode = 8;
    double latitude = 9;
    double longitude = 10;
    string extra = 11;
}

enum ProfileType {
    PERSON = 0;
    INSTITUTION = 1;
    BOT = 2;
}

// The response message containing the greetings
message ProfileObject {
    string ID = 1;
    ProfileType type = 2;
    map<string, string> properties =3;
    repeated ContactObject contacts = 4;
    repeated AddressObject addresses = 5;
}

// The request message containing the profile's hash
message ProfileIDRequest {
    string ID = 1;
}

// The request message containing the profile's hash
message ProfileSearchRequest {
    string query = 1;
    repeated string properties = 2; // Properties to include in the search request.
    int32 page = 3;
    int32 count = 4;

}

// The request message containing the profile's hash
message ProfileMergeRequest {
    string ID = 1;
    string mergeID = 2;
}

// The request message containing the information necessary to create a profile
message ProfileCreateRequest {
    string ID = 1;
    ProfileType type = 2;
    string contact = 3;
    map<string, string> properties =4;
}


// The request message containing the information necessary to create a profile
message ProfileUpdateRequest {
    string ID = 1;
    map<string, string> properties =4;
}


// The request message containing the information necessary to create a profile
message ProfileAddContactRequest {
    string ID = 1;
    string contact = 2;
}

// The request message containing the information necessary to create a profile
message ProfileAddAddressRequest {
    string ID = 1;
    AddressObject address = 2;
}

// Request message containing a contact necessary to link to a profile
message ProfileContactRequest {
    string contact = 1;
}


// The profile service definition.
service ProfileService {
    // Obtains a profile by its hash
    rpc GetByID (ProfileIDRequest) returns (ProfileObject) {}

    // Obtains a profile by its hash
    rpc GetByContact (ProfileContactRequest) returns (ProfileObject) {}

    // Obtains a profile by its hash
    rpc Search (ProfileSearchRequest) returns (stream ProfileObject) {}

    // Uses data found in the profile from mergeHash to update the current profile.
    rpc Merge (ProfileMergeRequest) returns (ProfileObject) {}

    // Creates a new profile based on the request.
    rpc Create (ProfileCreateRequest) returns (ProfileObject) {}

    // Creates a new profile based on the request.
    rpc Update (ProfileUpdateRequest) returns (ProfileObject) {}

    // Adds a new contact based on the request/this leads to automatic verification.
    rpc AddContact (ProfileAddContactRequest) returns (ProfileObject) {}

    // Adds a new address based on the request.
    rpc AddAddress (ProfileAddAddressRequest) returns (ProfileObject) {}

}

