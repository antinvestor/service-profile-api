// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: profile/v1/profile.proto

package profile_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ContactObject with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ContactObject) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		return ContactObjectValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
	}

	if !_ContactObject_ID_Pattern.MatchString(m.GetID()) {
		return ContactObjectValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
	}

	// no validation rules for Type

	// no validation rules for Detail

	// no validation rules for Verifed

	// no validation rules for CommunicationLevel

	// no validation rules for State

	return nil
}

// ContactObjectValidationError is the validation error returned by
// ContactObject.Validate if the designated constraints aren't met.
type ContactObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactObjectValidationError) ErrorName() string { return "ContactObjectValidationError" }

// Error satisfies the builtin error interface
func (e ContactObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactObjectValidationError{}

var _ContactObject_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on AddressObject with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddressObject) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		return AddressObjectValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
	}

	if !_AddressObject_ID_Pattern.MatchString(m.GetID()) {
		return AddressObjectValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		return AddressObjectValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
	}

	// no validation rules for Country

	// no validation rules for City

	// no validation rules for Area

	// no validation rules for Street

	// no validation rules for House

	// no validation rules for Postcode

	// no validation rules for Latitude

	// no validation rules for Longitude

	if l := utf8.RuneCountInString(m.GetExtra()); l < 10 || l > 500 {
		return AddressObjectValidationError{
			field:  "Extra",
			reason: "value length must be between 10 and 500 runes, inclusive",
		}
	}

	return nil
}

// AddressObjectValidationError is the validation error returned by
// AddressObject.Validate if the designated constraints aren't met.
type AddressObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressObjectValidationError) ErrorName() string { return "AddressObjectValidationError" }

// Error satisfies the builtin error interface
func (e AddressObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressObjectValidationError{}

var _AddressObject_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileObject with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProfileObject) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		return ProfileObjectValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
	}

	if !_ProfileObject_ID_Pattern.MatchString(m.GetID()) {
		return ProfileObjectValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
	}

	// no validation rules for Type

	// no validation rules for Properties

	for idx, item := range m.GetContacts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileObjectValidationError{
					field:  fmt.Sprintf("Contacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileObjectValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	return nil
}

// ProfileObjectValidationError is the validation error returned by
// ProfileObject.Validate if the designated constraints aren't met.
type ProfileObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileObjectValidationError) ErrorName() string { return "ProfileObjectValidationError" }

// Error satisfies the builtin error interface
func (e ProfileObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileObjectValidationError{}

var _ProfileObject_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProfileIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		return ProfileIDRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
	}

	if !_ProfileIDRequest_ID_Pattern.MatchString(m.GetID()) {
		return ProfileIDRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
	}

	return nil
}

// ProfileIDRequestValidationError is the validation error returned by
// ProfileIDRequest.Validate if the designated constraints aren't met.
type ProfileIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileIDRequestValidationError) ErrorName() string { return "ProfileIDRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProfileIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileIDRequestValidationError{}

var _ProfileIDRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProfileSearchRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Query

	// no validation rules for State

	// no validation rules for Page

	// no validation rules for Count

	return nil
}

// ProfileSearchRequestValidationError is the validation error returned by
// ProfileSearchRequest.Validate if the designated constraints aren't met.
type ProfileSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileSearchRequestValidationError) ErrorName() string {
	return "ProfileSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileSearchRequestValidationError{}

// Validate checks the field values on ProfileMergeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProfileMergeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		return ProfileMergeRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
	}

	if !_ProfileMergeRequest_ID_Pattern.MatchString(m.GetID()) {
		return ProfileMergeRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetMergeID()); l < 3 || l > 40 {
		return ProfileMergeRequestValidationError{
			field:  "MergeID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
	}

	if !_ProfileMergeRequest_MergeID_Pattern.MatchString(m.GetMergeID()) {
		return ProfileMergeRequestValidationError{
			field:  "MergeID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
	}

	return nil
}

// ProfileMergeRequestValidationError is the validation error returned by
// ProfileMergeRequest.Validate if the designated constraints aren't met.
type ProfileMergeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileMergeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileMergeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileMergeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileMergeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileMergeRequestValidationError) ErrorName() string {
	return "ProfileMergeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileMergeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileMergeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileMergeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileMergeRequestValidationError{}

var _ProfileMergeRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

var _ProfileMergeRequest_MergeID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProfileCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := ProfileType_name[int32(m.GetType())]; !ok {
		return ProfileCreateRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	if l := utf8.RuneCountInString(m.GetContact()); l < 3 || l > 255 {
		return ProfileCreateRequestValidationError{
			field:  "Contact",
			reason: "value length must be between 3 and 255 runes, inclusive",
		}
	}

	// no validation rules for Properties

	return nil
}

// ProfileCreateRequestValidationError is the validation error returned by
// ProfileCreateRequest.Validate if the designated constraints aren't met.
type ProfileCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileCreateRequestValidationError) ErrorName() string {
	return "ProfileCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileCreateRequestValidationError{}

// Validate checks the field values on ProfileUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProfileUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		return ProfileUpdateRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
	}

	if !_ProfileUpdateRequest_ID_Pattern.MatchString(m.GetID()) {
		return ProfileUpdateRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
	}

	// no validation rules for Properties

	// no validation rules for State

	return nil
}

// ProfileUpdateRequestValidationError is the validation error returned by
// ProfileUpdateRequest.Validate if the designated constraints aren't met.
type ProfileUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileUpdateRequestValidationError) ErrorName() string {
	return "ProfileUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileUpdateRequestValidationError{}

var _ProfileUpdateRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileAddContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProfileAddContactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		return ProfileAddContactRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
	}

	if !_ProfileAddContactRequest_ID_Pattern.MatchString(m.GetID()) {
		return ProfileAddContactRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
	}

	// no validation rules for Contact

	return nil
}

// ProfileAddContactRequestValidationError is the validation error returned by
// ProfileAddContactRequest.Validate if the designated constraints aren't met.
type ProfileAddContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileAddContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileAddContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileAddContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileAddContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileAddContactRequestValidationError) ErrorName() string {
	return "ProfileAddContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileAddContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileAddContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileAddContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileAddContactRequestValidationError{}

var _ProfileAddContactRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileAddAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProfileAddAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		return ProfileAddAddressRequestValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
	}

	if !_ProfileAddAddressRequest_ID_Pattern.MatchString(m.GetID()) {
		return ProfileAddAddressRequestValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
	}

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileAddAddressRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProfileAddAddressRequestValidationError is the validation error returned by
// ProfileAddAddressRequest.Validate if the designated constraints aren't met.
type ProfileAddAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileAddAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileAddAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileAddAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileAddAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileAddAddressRequestValidationError) ErrorName() string {
	return "ProfileAddAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileAddAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileAddAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileAddAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileAddAddressRequestValidationError{}

var _ProfileAddAddressRequest_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on ProfileContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProfileContactRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Contact

	return nil
}

// ProfileContactRequestValidationError is the validation error returned by
// ProfileContactRequest.Validate if the designated constraints aren't met.
type ProfileContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileContactRequestValidationError) ErrorName() string {
	return "ProfileContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileContactRequestValidationError{}
