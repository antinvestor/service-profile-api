// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package profile_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceClient interface {
	// Obtains a profile by its hash
	GetByID(ctx context.Context, in *ProfileIDRequest, opts ...grpc.CallOption) (*ProfileObject, error)
	// Obtains a profile by its hash
	GetByContact(ctx context.Context, in *ProfileContactRequest, opts ...grpc.CallOption) (*ProfileObject, error)
	// Obtains a profile by its hash
	Search(ctx context.Context, in *ProfileSearchRequest, opts ...grpc.CallOption) (ProfileService_SearchClient, error)
	// Uses data found in the profile from mergeHash to update the current profile.
	Merge(ctx context.Context, in *ProfileMergeRequest, opts ...grpc.CallOption) (*ProfileObject, error)
	// Creates a new profile based on the request.
	Create(ctx context.Context, in *ProfileCreateRequest, opts ...grpc.CallOption) (*ProfileObject, error)
	// Creates a new profile based on the request.
	Update(ctx context.Context, in *ProfileUpdateRequest, opts ...grpc.CallOption) (*ProfileObject, error)
	// Adds a new contact based on the request/this leads to automatic verification.
	AddContact(ctx context.Context, in *ProfileAddContactRequest, opts ...grpc.CallOption) (*ProfileObject, error)
	// Adds a new address based on the request.
	AddAddress(ctx context.Context, in *ProfileAddAddressRequest, opts ...grpc.CallOption) (*ProfileObject, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) GetByID(ctx context.Context, in *ProfileIDRequest, opts ...grpc.CallOption) (*ProfileObject, error) {
	out := new(ProfileObject)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetByContact(ctx context.Context, in *ProfileContactRequest, opts ...grpc.CallOption) (*ProfileObject, error) {
	out := new(ProfileObject)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/GetByContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Search(ctx context.Context, in *ProfileSearchRequest, opts ...grpc.CallOption) (ProfileService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProfileService_ServiceDesc.Streams[0], "/profile.ProfileService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_SearchClient interface {
	Recv() (*ProfileObject, error)
	grpc.ClientStream
}

type profileServiceSearchClient struct {
	grpc.ClientStream
}

func (x *profileServiceSearchClient) Recv() (*ProfileObject, error) {
	m := new(ProfileObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) Merge(ctx context.Context, in *ProfileMergeRequest, opts ...grpc.CallOption) (*ProfileObject, error) {
	out := new(ProfileObject)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/Merge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Create(ctx context.Context, in *ProfileCreateRequest, opts ...grpc.CallOption) (*ProfileObject, error) {
	out := new(ProfileObject)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Update(ctx context.Context, in *ProfileUpdateRequest, opts ...grpc.CallOption) (*ProfileObject, error) {
	out := new(ProfileObject)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) AddContact(ctx context.Context, in *ProfileAddContactRequest, opts ...grpc.CallOption) (*ProfileObject, error) {
	out := new(ProfileObject)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/AddContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) AddAddress(ctx context.Context, in *ProfileAddAddressRequest, opts ...grpc.CallOption) (*ProfileObject, error) {
	out := new(ProfileObject)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/AddAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility
type ProfileServiceServer interface {
	// Obtains a profile by its hash
	GetByID(context.Context, *ProfileIDRequest) (*ProfileObject, error)
	// Obtains a profile by its hash
	GetByContact(context.Context, *ProfileContactRequest) (*ProfileObject, error)
	// Obtains a profile by its hash
	Search(*ProfileSearchRequest, ProfileService_SearchServer) error
	// Uses data found in the profile from mergeHash to update the current profile.
	Merge(context.Context, *ProfileMergeRequest) (*ProfileObject, error)
	// Creates a new profile based on the request.
	Create(context.Context, *ProfileCreateRequest) (*ProfileObject, error)
	// Creates a new profile based on the request.
	Update(context.Context, *ProfileUpdateRequest) (*ProfileObject, error)
	// Adds a new contact based on the request/this leads to automatic verification.
	AddContact(context.Context, *ProfileAddContactRequest) (*ProfileObject, error)
	// Adds a new address based on the request.
	AddAddress(context.Context, *ProfileAddAddressRequest) (*ProfileObject, error)
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (UnimplementedProfileServiceServer) GetByID(context.Context, *ProfileIDRequest) (*ProfileObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedProfileServiceServer) GetByContact(context.Context, *ProfileContactRequest) (*ProfileObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByContact not implemented")
}
func (UnimplementedProfileServiceServer) Search(*ProfileSearchRequest, ProfileService_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedProfileServiceServer) Merge(context.Context, *ProfileMergeRequest) (*ProfileObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (UnimplementedProfileServiceServer) Create(context.Context, *ProfileCreateRequest) (*ProfileObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProfileServiceServer) Update(context.Context, *ProfileUpdateRequest) (*ProfileObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProfileServiceServer) AddContact(context.Context, *ProfileAddContactRequest) (*ProfileObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContact not implemented")
}
func (UnimplementedProfileServiceServer) AddAddress(context.Context, *ProfileAddAddressRequest) (*ProfileObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetByID(ctx, req.(*ProfileIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetByContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetByContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/GetByContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetByContact(ctx, req.(*ProfileContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfileSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).Search(m, &profileServiceSearchServer{stream})
}

type ProfileService_SearchServer interface {
	Send(*ProfileObject) error
	grpc.ServerStream
}

type profileServiceSearchServer struct {
	grpc.ServerStream
}

func (x *profileServiceSearchServer) Send(m *ProfileObject) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileMergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Merge(ctx, req.(*ProfileMergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Create(ctx, req.(*ProfileCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Update(ctx, req.(*ProfileUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_AddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileAddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/AddContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddContact(ctx, req.(*ProfileAddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileAddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/AddAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddAddress(ctx, req.(*ProfileAddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _ProfileService_GetByID_Handler,
		},
		{
			MethodName: "GetByContact",
			Handler:    _ProfileService_GetByContact_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _ProfileService_Merge_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ProfileService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProfileService_Update_Handler,
		},
		{
			MethodName: "AddContact",
			Handler:    _ProfileService_AddContact_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _ProfileService_AddAddress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _ProfileService_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "profile.proto",
}
